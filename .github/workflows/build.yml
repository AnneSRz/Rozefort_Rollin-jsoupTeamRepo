name: Build  # Name of the workflow

on:  # Events that trigger this workflow
  push:  # Trigger when a commit is pushed to the repository
  pull_request:  # Trigger when a pull request is opened or updated

jobs:  # Define the jobs that will be executed

  test:  # Job name is 'test'
    runs-on: ${{ matrix.os }}  # Use matrix value to set the OS dynamically

    strategy:  # Define a matrix strategy for running multiple configurations
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]  # Specify OS to run on
        java: [8, 17, 21]  # Specify JVM versions to test with
        jvm_flags: [

          #Deja fait par le prof :
          # Xmx1024m taille max du heap 
          #Xss640k : Stack d<un thread
          # Xpkginfo:always : genere un fichier de package d<information
          "-XX:+UseCompressedOops -XX:+PrintFlagsFinal", #Memory control
          "-XX:+HeapDumpOnOutOfMemoryError -XX:+PrintFlagsFinal",  #Error management
          "-XX:+UseG1GC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:gc.log -XX:+PrintFlagsFinal", #garbage colelction
          "-Dhttp.keepAlive=true -Dsun.net.http.errorstream.enableBuffering=true -XX:+PrintFlagsFinal", #Flags for HTTP requests / connections  optimization 
          "-XX:+AggressiveOpts -XX:+PrintFlagsFinal" #Threads Management and optimisation


        ]  # Matrix of JVM flags to test
      fail-fast: false  # Don't stop the workflow if one job fails




    name: Test JDK ${{ matrix.java }}, ${{ matrix.os }}  # Dynamic job name for easier identification in UI

    steps:  # Steps within the job



      - name: Checkout  # Step to check out the code from the repository
        uses: actions/checkout@v4  # Checkout action to pull the latest code


        
      - name: Set up JDK ${{ matrix.java }}  # Set up the JDK for the current job based on matrix
        uses: actions/setup-java@v4  # Action to install Java
        with:
          java-version: ${{ matrix.java }}  # Use the specific JDK version from matrix
          distribution: 'zulu'  # Use the Zulu OpenJDK distribution
          cache: 'maven'  # Cache Maven dependencies to improve build times


#NEW ADDITIONS :
      - name: Apply JVM Flags  # Apply and log the JVM flags for clarity
        env:
            MAVEN_OPTS: ${{ matrix.jvm_flags }}  # Apply the specific JVM flags as environment variables
        run: |
            echo "Applying JVM flags: ${{ matrix.jvm_flags }}"  
            echo "Flaggy flaging all the flaggy flags"
          # Log the flags used for this run


      - name: Maven Compile  # Step to compile the project using Maven
        run: mvn -X compile -B --file pom.xml  # Run Maven with debug output in batch mode

      - name: Maven Verify  # Step to verify the project (typically running tests)
        run: mvn -X verify -B --file pom.xml  # Run Maven with debug output in batch mode


#NEW ADDITIONS :
# Generates a JaCoCo coverage report based on test results
      - name: Generate Coverage Report  # Step name for displaying in the GitHub Actions UI
        run: mvn jacoco:report  # Runs Maven command to generate a coverage report using JaCoCo plugin

      # Extracts the coverage percentage from the generated JaCoCo report
      - name: Get JaCoCo Coverage  # Step name for getting coverage value
        id: coverage  # Assigns an ID to this step to reference it later if needed
        

        #logic from test.yml
        # Executes a Python script to parse the JaCoCo CSV report file and get the coverage value
        # Sets an environment variable "COVERAGE" with the extracted value to be used in later steps 
        run: |
              coverage=$(python3 config/coverage.py target/site/jacoco/jacoco.csv)
              echo "COVERAGE=$coverage" >> $GITHUB_ENV
        shell: bash  # Specifies the shell to use for running the script (bash in this case)

      # Uploads the entire JaCoCo report as an artifact for later viewing or download
      - name: Upload Coverage Report  # Step name for displaying in the GitHub Actions UI
        uses: actions/upload-artifact@v3  # Uses GitHub's action to upload artifacts
        with:
          name: coverage-report  # Sets a name for the artifact, "coverage-report"
          path: target/site/jacoco  # Specifies the path to the JaCoCo report files to upload as an artifact


